blueprint:
  name: Lichtwecker mit Farbtemperatur by SmartHome for Dummies
  description: >
    Lichtwecker - Licht wird über einen definierten Zeitraum vom Start Helligkeitswert bis Ziel Helligkeitswert hoch gedimmt.
    Eine gleichmässige Anpasung der Farbtemperatur erfolgt ebenfalls über die Zeit vom Start Wert zum Ziewert der Farbtemperatur.
    Ist dr Start Wert und der Ziel Wert der Farbtemperatur gleich. Bleibt die Farbtemperatur konstant.
    Für Lichter ohne Farbtemperatur kann diese deaktiviert werden.
    Das Ausschaltten des Lichts deaktiviert den Lichtwecker. 
    Es werden zwei Helfer benöttigt.
    - Ein input_datetime -> Weckzeit
    - Ein input_boolean -> Zum aktivieren/ deaktivieren des Lichttweckers
  domain: automation
  author: SmartHome for Dummies
  input:
    light:
      name: Licht Entität
      description: Lampe die als Lichtwecker verwendet werden soll
      selector:
        entity:
          domain: light
    start_color_temperature:
      name: Start Farbtemperatur
      default: 450
      selector:
        color_temp:
            min_mireds: 153
            max_mireds: 500
    end_color_temperature:
      name: Ziel Farbtemperatur
      description: Farbtemperatur die nach Ablauf des Lichtweckers erreicht werden soll. Start = Ziel -> Konstante Farbtemperatur über die gesamte Zeit.
      default: 153
      selector:
        color_temp:
            min_mireds: 153
            max_mireds: 500 
    use_temperature:
      name: Farbtemperatur verwenden?
      description: Bei Lichtern ohne Farbtemperatur kann die Verwendung der Farbttemperatur deaktieviiert werden.
      selector:
        boolean: 
      default: false
    start_brightness:
      name: Start Helligkeit
      description: Start Helligkeit für den Lichtwecker
      default: 10
      selector:
        number:
          min: 1
          max: 99
          mode: slider
          step: 1.0
          unit_of_measurement: "%"
    end_brightness:
      name: Ziel Helligkeit
      description: Ziel Helligkeit die nach Ablauf des Lichtweckers erreicht werden soll. Muss größer sein als die Start Helligkeit.
      default: 80
      selector:
        number:
          min: 1
          max: 100
          mode: slider
          step: 1.0
          unit_of_measurement: "%"
    time:
      name: Weckzeit
      description: Uhrzeit Helfer - welche die Startzeit des Lichtweckers vorgibt.
      selector:
        entity:
          domain: input_datetime
    on_off:
      name: Lichtwecker aktiv
      description: Umschalter Helfer - Aktiviert/ deaktiviert den Lichtwecker
      selector:
        entity:
          domain: input_boolean
    duration:
      name: Dauer
      description: Zeit bis die Zielhelligkeit erreicht werden soll
      default: 10
      selector:
        number:
          min: 1
          max: 60
          mode: slider
          step: 1.0
          unit_of_measurement: "min"
    weekday:
      name: Wochentage
      description: Wochentage an deneen der Lichtweecker aktiv sein soll.
      default: [mon, tue, wed, thu, fri, sat, sun]
      selector:
        select:
          options:
          - label: Montag
            value: mon
          - label: Dienstag
            value: tue
          - label: Mittwoch
            value: wed
          - label: Donnerstag
            value: thu
          - label: Freitag
            value: fri
          - label: Samstag
            value: sat
          - label: Sonntag
            value: sun
          custom_value: false
          multiple: true

mode: restart
max_exceeded: silent

trigger:
  - platform: time
    at: !input time
    id: start
  - platform: state
    entity_id: !input light
    id: ende
    from: "on"
    to: "off"
condition:
  - condition: state
    entity_id: !input on_off
    state: "on"
  - condition: time
    weekday: !input weekday
action:
  - variables:
      light_entity: !input light
      end_brightness: !input end_brightness
      start_brightness: !input start_brightness
      current_brightness: "{{ state_attr(light_entity, 'brightness') }}"
      repeat_number: "{{end_brightness - start_brightness}}"
      use_temperature: !input use_temperature
      duration_time: !input duration
      delay_time: "{{ (duration_time*60)/(end_brightness - start_brightness)}}"
      target_brightness: "{{255*end_brightness/100}}"
      start_color_temperature: !input start_color_temperature
      end_color_temperature: !input end_color_temperature
      color_teperature_steps: "{{((start_color_temperature - end_color_temperature) / repeat_number) |float | round(0)}}"
  - choose:
      - conditions:
          - condition: trigger
            id: start
        sequence:
          - if:
              - condition: template
                value_template: |
                  {{ use_temperature == true }}
            then:
              - service: light.turn_on
                data:
                  brightness_pct: !input start_brightness
                  color_temp: !input start_color_temperature
                target:
                  entity_id:
                    - !input light
              - repeat:
                  until:
                    - condition: template
                      value_template: "{{ state_attr(light_entity, 'brightness') >= target_brightness}}"
                  sequence:
                    - delay:
                        hours: 0
                        minutes: 0
                        seconds: "{{delay_time | float | round(3)}}"
                        milliseconds: 0
                    - service: light.turn_on
                      data:
                        brightness_step_pct: 1
                        color_temp: "{{ (state_attr(light_entity, 'color_temp') - color_teperature_steps) }}"
                      target:
                        entity_id: !input light
              - service: light.turn_on
                data:
                  brightness_pct: !input end_brightness
                  color_temp: !input end_color_temperature
                target:
                  entity_id:
                    - !input light
            else:
              - service: light.turn_on
                data:
                  brightness_pct: !input start_brightness
                target:
                  entity_id:
                    - !input light
              - repeat:
                  until:
                    - condition: template
                      value_template: "{{ state_attr(light_entity, 'brightness') >= target_brightness}}"
                  sequence:
                    - delay:
                        hours: 0
                        minutes: 0
                        seconds: "{{delay_time | float | round(3)}}"
                        milliseconds: 0
                    - service: light.turn_on
                      data:
                        brightness_step_pct: 1
                      target:
                        entity_id: !input light
              - service: light.turn_on
                data:
                  brightness_pct: !input end_brightness
                target:
                  entity_id:
                    - !input light
